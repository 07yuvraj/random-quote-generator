{"version":3,"sources":["Quote.js","Author.js","Header.js","Genre.js","App.js","reportWebVitals.js","index.js"],"names":["Quote","quote","quoteText","_id","Author","authorname","useState","data","setData","useEffect","axios","get","params","author","then","response","length","map","val","Header","state","setState","onClick","prevState","Genre","genre","App","setAuthor","setGenre","random","Math","floor","limit","genere","page","className","exact","path","quoteAuthor","quoteGenre","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.074de4cd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Quote({quote}){\r\n    return(\r\n        <div key={quote._id}>\r\n            <p>{quote.quoteText}</p>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Quote from './Quote';\r\n\r\nexport default function Author({ authorname }) {\r\n    const [data, setData] = useState([]);\r\n    useEffect(() => {\r\n        let url = \"https://quote-garden.herokuapp.com/api/v3/quotes\";\r\n        axios.get(url, {\r\n            params: {\r\n                author: authorname,\r\n            }\r\n        })\r\n            .then(response => {\r\n                setData(response.data.data);\r\n            })\r\n    }, [authorname])\r\n    return (\r\n        <div key={\"authorlist\"}>\r\n            <h2>Author : {authorname}</h2>\r\n            {data.length >= 1 && data.map(val => {\r\n                return(<Quote key={val._id} quote={val} />) \r\n            })}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport default function Header({state,setState}){\r\n    const handlestate=()=>{\r\n        setState((prevState) => !prevState)\r\n      }\r\n    return(\r\n        <button onClick={handlestate}>Refresh</button>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Quote from './Quote';\r\n\r\nexport default function Genre({ genre }) {\r\n    const [data, setData] = useState([]);\r\n    useEffect(() => {\r\n        let url = \"https://quote-garden.herokuapp.com/api/v3/quotes\";\r\n        axios.get(url, {\r\n            params: {\r\n                genre: genre,\r\n            }\r\n        })\r\n            .then(response => {\r\n                setData(response.data.data);\r\n            })\r\n    }, [genre])\r\n    return (\r\n        <div >\r\n            <div key={\"genre\"}>\r\n                <h2>Genre : {genre}</h2>\r\n                {data.length >= 1 && data.map(val => {\r\n                    return(<Quote key={val._id} quote={val} />) \r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Quote from './Quote';\nimport Author from './Author';\nimport Header from './Header';\nimport Genre from './Genre';\nimport { Link, Route } from 'react-router-dom';\n\nfunction App() {\n  const [state, setState] = useState(false);\n  const [data, setData] = useState([]);\n  const [author, setAuthor] = useState(\"\");\n  const [genre, setGenre] = useState(\"\");\n  useEffect(() => {\n    let url = \"https://quote-garden.herokuapp.com/api/v3/quotes\";\n    let random = Math.floor(Math.random() * 72000);\n    axios.get(url, {\n      params: {\n        limit: 1,\n        author: \" \",\n        genere: \" \",\n        page: random,\n      }\n    })\n      .then(response => {\n        setData(response.data.data);\n      })\n  }, [state]);\n  return (\n    <div className=\"App\">\n      <Route exact path='/'>\n        <Header state={state} setState={setState} />\n        {data.length >= 1 && data.map(val => {\n          return(\n            <div key={val._id}>\n              <Quote key={val._id} quote={val} />\n              <p>Author : {val.quoteAuthor}<br />Genre : {val.quoteGenre}</p>\n              <div>\n                <h2>Find Quotes according to :\n              <Link to=\"/author\">\n                    <div onClick={() => {\n                      setAuthor(val.quoteAuthor)\n                    }}>\n                      {val.quoteAuthor}\n                    </div>\n                  </Link>\n                  <Link to=\"/genre\">\n                    <div onClick={() => {\n                      setGenre(val.quoteGenre)\n                    }}>{val.quoteGenre}</div>\n                  </Link>\n                </h2>\n              </div>\n\n            </div>\n          )\n        })}\n      </Route>\n      <Route exact path=\"/author\">\n        <Link to=\"/\"><Header state={state} setState={setState} /></Link>\n        <Author authorname={author} />\n      </Route>\n      <Route exact path=\"/genre\">\n        <Link to=\"/\"><Header state={state} setState={setState} /></Link>\n        <Genre genre={genre} />\n      </Route>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}